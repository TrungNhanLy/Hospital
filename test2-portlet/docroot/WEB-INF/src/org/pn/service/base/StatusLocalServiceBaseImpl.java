/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.pn.service.base;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.persistence.UserPersistence;

import org.pn.model.Status;

import org.pn.service.StatusLocalService;
import org.pn.service.persistence.BillsPersistence;
import org.pn.service.persistence.DiagnosisPersistence;
import org.pn.service.persistence.DoctorsPersistence;
import org.pn.service.persistence.DrugPersistence;
import org.pn.service.persistence.MedicinePersistence;
import org.pn.service.persistence.PatientsPersistence;
import org.pn.service.persistence.RoomPatientPersistence;
import org.pn.service.persistence.StaffsPersistence;
import org.pn.service.persistence.StatusPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the status local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link org.pn.service.impl.StatusLocalServiceImpl}.
 * </p>
 *
 * @author thuctap
 * @see org.pn.service.impl.StatusLocalServiceImpl
 * @see org.pn.service.StatusLocalServiceUtil
 * @generated
 */
public abstract class StatusLocalServiceBaseImpl extends BaseLocalServiceImpl
	implements StatusLocalService, IdentifiableBean {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link org.pn.service.StatusLocalServiceUtil} to access the status local service.
	 */

	/**
	 * Adds the status to the database. Also notifies the appropriate model listeners.
	 *
	 * @param status the status
	 * @return the status that was added
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public Status addStatus(Status status) throws SystemException {
		status.setNew(true);

		return statusPersistence.update(status);
	}

	/**
	 * Creates a new status with the primary key. Does not add the status to the database.
	 *
	 * @param status_no the primary key for the new status
	 * @return the new status
	 */
	@Override
	public Status createStatus(long status_no) {
		return statusPersistence.create(status_no);
	}

	/**
	 * Deletes the status with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param status_no the primary key of the status
	 * @return the status that was removed
	 * @throws PortalException if a status with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public Status deleteStatus(long status_no)
		throws PortalException, SystemException {
		return statusPersistence.remove(status_no);
	}

	/**
	 * Deletes the status from the database. Also notifies the appropriate model listeners.
	 *
	 * @param status the status
	 * @return the status that was removed
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public Status deleteStatus(Status status) throws SystemException {
		return statusPersistence.remove(status);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(Status.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery)
		throws SystemException {
		return statusPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link org.pn.model.impl.StatusModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
		throws SystemException {
		return statusPersistence.findWithDynamicQuery(dynamicQuery, start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link org.pn.model.impl.StatusModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
		OrderByComparator orderByComparator) throws SystemException {
		return statusPersistence.findWithDynamicQuery(dynamicQuery, start, end,
			orderByComparator);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery)
		throws SystemException {
		return statusPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) throws SystemException {
		return statusPersistence.countWithDynamicQuery(dynamicQuery, projection);
	}

	@Override
	public Status fetchStatus(long status_no) throws SystemException {
		return statusPersistence.fetchByPrimaryKey(status_no);
	}

	/**
	 * Returns the status with the primary key.
	 *
	 * @param status_no the primary key of the status
	 * @return the status
	 * @throws PortalException if a status with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public Status getStatus(long status_no)
		throws PortalException, SystemException {
		return statusPersistence.findByPrimaryKey(status_no);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException, SystemException {
		return statusPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the statuses.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link org.pn.model.impl.StatusModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of statuses
	 * @param end the upper bound of the range of statuses (not inclusive)
	 * @return the range of statuses
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public List<Status> getStatuses(int start, int end)
		throws SystemException {
		return statusPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of statuses.
	 *
	 * @return the number of statuses
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public int getStatusesCount() throws SystemException {
		return statusPersistence.countAll();
	}

	/**
	 * Updates the status in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param status the status
	 * @return the status that was updated
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public Status updateStatus(Status status) throws SystemException {
		return statusPersistence.update(status);
	}

	/**
	 * Returns the bills local service.
	 *
	 * @return the bills local service
	 */
	public org.pn.service.BillsLocalService getBillsLocalService() {
		return billsLocalService;
	}

	/**
	 * Sets the bills local service.
	 *
	 * @param billsLocalService the bills local service
	 */
	public void setBillsLocalService(
		org.pn.service.BillsLocalService billsLocalService) {
		this.billsLocalService = billsLocalService;
	}

	/**
	 * Returns the bills persistence.
	 *
	 * @return the bills persistence
	 */
	public BillsPersistence getBillsPersistence() {
		return billsPersistence;
	}

	/**
	 * Sets the bills persistence.
	 *
	 * @param billsPersistence the bills persistence
	 */
	public void setBillsPersistence(BillsPersistence billsPersistence) {
		this.billsPersistence = billsPersistence;
	}

	/**
	 * Returns the diagnosis local service.
	 *
	 * @return the diagnosis local service
	 */
	public org.pn.service.DiagnosisLocalService getDiagnosisLocalService() {
		return diagnosisLocalService;
	}

	/**
	 * Sets the diagnosis local service.
	 *
	 * @param diagnosisLocalService the diagnosis local service
	 */
	public void setDiagnosisLocalService(
		org.pn.service.DiagnosisLocalService diagnosisLocalService) {
		this.diagnosisLocalService = diagnosisLocalService;
	}

	/**
	 * Returns the diagnosis persistence.
	 *
	 * @return the diagnosis persistence
	 */
	public DiagnosisPersistence getDiagnosisPersistence() {
		return diagnosisPersistence;
	}

	/**
	 * Sets the diagnosis persistence.
	 *
	 * @param diagnosisPersistence the diagnosis persistence
	 */
	public void setDiagnosisPersistence(
		DiagnosisPersistence diagnosisPersistence) {
		this.diagnosisPersistence = diagnosisPersistence;
	}

	/**
	 * Returns the doctors local service.
	 *
	 * @return the doctors local service
	 */
	public org.pn.service.DoctorsLocalService getDoctorsLocalService() {
		return doctorsLocalService;
	}

	/**
	 * Sets the doctors local service.
	 *
	 * @param doctorsLocalService the doctors local service
	 */
	public void setDoctorsLocalService(
		org.pn.service.DoctorsLocalService doctorsLocalService) {
		this.doctorsLocalService = doctorsLocalService;
	}

	/**
	 * Returns the doctors persistence.
	 *
	 * @return the doctors persistence
	 */
	public DoctorsPersistence getDoctorsPersistence() {
		return doctorsPersistence;
	}

	/**
	 * Sets the doctors persistence.
	 *
	 * @param doctorsPersistence the doctors persistence
	 */
	public void setDoctorsPersistence(DoctorsPersistence doctorsPersistence) {
		this.doctorsPersistence = doctorsPersistence;
	}

	/**
	 * Returns the drug local service.
	 *
	 * @return the drug local service
	 */
	public org.pn.service.DrugLocalService getDrugLocalService() {
		return drugLocalService;
	}

	/**
	 * Sets the drug local service.
	 *
	 * @param drugLocalService the drug local service
	 */
	public void setDrugLocalService(
		org.pn.service.DrugLocalService drugLocalService) {
		this.drugLocalService = drugLocalService;
	}

	/**
	 * Returns the drug persistence.
	 *
	 * @return the drug persistence
	 */
	public DrugPersistence getDrugPersistence() {
		return drugPersistence;
	}

	/**
	 * Sets the drug persistence.
	 *
	 * @param drugPersistence the drug persistence
	 */
	public void setDrugPersistence(DrugPersistence drugPersistence) {
		this.drugPersistence = drugPersistence;
	}

	/**
	 * Returns the medicine local service.
	 *
	 * @return the medicine local service
	 */
	public org.pn.service.MedicineLocalService getMedicineLocalService() {
		return medicineLocalService;
	}

	/**
	 * Sets the medicine local service.
	 *
	 * @param medicineLocalService the medicine local service
	 */
	public void setMedicineLocalService(
		org.pn.service.MedicineLocalService medicineLocalService) {
		this.medicineLocalService = medicineLocalService;
	}

	/**
	 * Returns the medicine persistence.
	 *
	 * @return the medicine persistence
	 */
	public MedicinePersistence getMedicinePersistence() {
		return medicinePersistence;
	}

	/**
	 * Sets the medicine persistence.
	 *
	 * @param medicinePersistence the medicine persistence
	 */
	public void setMedicinePersistence(MedicinePersistence medicinePersistence) {
		this.medicinePersistence = medicinePersistence;
	}

	/**
	 * Returns the patients local service.
	 *
	 * @return the patients local service
	 */
	public org.pn.service.PatientsLocalService getPatientsLocalService() {
		return patientsLocalService;
	}

	/**
	 * Sets the patients local service.
	 *
	 * @param patientsLocalService the patients local service
	 */
	public void setPatientsLocalService(
		org.pn.service.PatientsLocalService patientsLocalService) {
		this.patientsLocalService = patientsLocalService;
	}

	/**
	 * Returns the patients persistence.
	 *
	 * @return the patients persistence
	 */
	public PatientsPersistence getPatientsPersistence() {
		return patientsPersistence;
	}

	/**
	 * Sets the patients persistence.
	 *
	 * @param patientsPersistence the patients persistence
	 */
	public void setPatientsPersistence(PatientsPersistence patientsPersistence) {
		this.patientsPersistence = patientsPersistence;
	}

	/**
	 * Returns the room patient local service.
	 *
	 * @return the room patient local service
	 */
	public org.pn.service.RoomPatientLocalService getRoomPatientLocalService() {
		return roomPatientLocalService;
	}

	/**
	 * Sets the room patient local service.
	 *
	 * @param roomPatientLocalService the room patient local service
	 */
	public void setRoomPatientLocalService(
		org.pn.service.RoomPatientLocalService roomPatientLocalService) {
		this.roomPatientLocalService = roomPatientLocalService;
	}

	/**
	 * Returns the room patient persistence.
	 *
	 * @return the room patient persistence
	 */
	public RoomPatientPersistence getRoomPatientPersistence() {
		return roomPatientPersistence;
	}

	/**
	 * Sets the room patient persistence.
	 *
	 * @param roomPatientPersistence the room patient persistence
	 */
	public void setRoomPatientPersistence(
		RoomPatientPersistence roomPatientPersistence) {
		this.roomPatientPersistence = roomPatientPersistence;
	}

	/**
	 * Returns the staffs local service.
	 *
	 * @return the staffs local service
	 */
	public org.pn.service.StaffsLocalService getStaffsLocalService() {
		return staffsLocalService;
	}

	/**
	 * Sets the staffs local service.
	 *
	 * @param staffsLocalService the staffs local service
	 */
	public void setStaffsLocalService(
		org.pn.service.StaffsLocalService staffsLocalService) {
		this.staffsLocalService = staffsLocalService;
	}

	/**
	 * Returns the staffs persistence.
	 *
	 * @return the staffs persistence
	 */
	public StaffsPersistence getStaffsPersistence() {
		return staffsPersistence;
	}

	/**
	 * Sets the staffs persistence.
	 *
	 * @param staffsPersistence the staffs persistence
	 */
	public void setStaffsPersistence(StaffsPersistence staffsPersistence) {
		this.staffsPersistence = staffsPersistence;
	}

	/**
	 * Returns the status local service.
	 *
	 * @return the status local service
	 */
	public org.pn.service.StatusLocalService getStatusLocalService() {
		return statusLocalService;
	}

	/**
	 * Sets the status local service.
	 *
	 * @param statusLocalService the status local service
	 */
	public void setStatusLocalService(
		org.pn.service.StatusLocalService statusLocalService) {
		this.statusLocalService = statusLocalService;
	}

	/**
	 * Returns the status persistence.
	 *
	 * @return the status persistence
	 */
	public StatusPersistence getStatusPersistence() {
		return statusPersistence;
	}

	/**
	 * Sets the status persistence.
	 *
	 * @param statusPersistence the status persistence
	 */
	public void setStatusPersistence(StatusPersistence statusPersistence) {
		this.statusPersistence = statusPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user remote service.
	 *
	 * @return the user remote service
	 */
	public com.liferay.portal.service.UserService getUserService() {
		return userService;
	}

	/**
	 * Sets the user remote service.
	 *
	 * @param userService the user remote service
	 */
	public void setUserService(
		com.liferay.portal.service.UserService userService) {
		this.userService = userService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		Class<?> clazz = getClass();

		_classLoader = clazz.getClassLoader();

		PersistedModelLocalServiceRegistryUtil.register("org.pn.model.Status",
			statusLocalService);
	}

	public void destroy() {
		PersistedModelLocalServiceRegistryUtil.unregister("org.pn.model.Status");
	}

	/**
	 * Returns the Spring bean ID for this bean.
	 *
	 * @return the Spring bean ID for this bean
	 */
	@Override
	public String getBeanIdentifier() {
		return _beanIdentifier;
	}

	/**
	 * Sets the Spring bean ID for this bean.
	 *
	 * @param beanIdentifier the Spring bean ID for this bean
	 */
	@Override
	public void setBeanIdentifier(String beanIdentifier) {
		_beanIdentifier = beanIdentifier;
	}

	@Override
	public Object invokeMethod(String name, String[] parameterTypes,
		Object[] arguments) throws Throwable {
		Thread currentThread = Thread.currentThread();

		ClassLoader contextClassLoader = currentThread.getContextClassLoader();

		if (contextClassLoader != _classLoader) {
			currentThread.setContextClassLoader(_classLoader);
		}

		try {
			return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
		}
		finally {
			if (contextClassLoader != _classLoader) {
				currentThread.setContextClassLoader(contextClassLoader);
			}
		}
	}

	protected Class<?> getModelClass() {
		return Status.class;
	}

	protected String getModelClassName() {
		return Status.class.getName();
	}

	/**
	 * Performs an SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) throws SystemException {
		try {
			DataSource dataSource = statusPersistence.getDataSource();

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql, new int[0]);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = org.pn.service.BillsLocalService.class)
	protected org.pn.service.BillsLocalService billsLocalService;
	@BeanReference(type = BillsPersistence.class)
	protected BillsPersistence billsPersistence;
	@BeanReference(type = org.pn.service.DiagnosisLocalService.class)
	protected org.pn.service.DiagnosisLocalService diagnosisLocalService;
	@BeanReference(type = DiagnosisPersistence.class)
	protected DiagnosisPersistence diagnosisPersistence;
	@BeanReference(type = org.pn.service.DoctorsLocalService.class)
	protected org.pn.service.DoctorsLocalService doctorsLocalService;
	@BeanReference(type = DoctorsPersistence.class)
	protected DoctorsPersistence doctorsPersistence;
	@BeanReference(type = org.pn.service.DrugLocalService.class)
	protected org.pn.service.DrugLocalService drugLocalService;
	@BeanReference(type = DrugPersistence.class)
	protected DrugPersistence drugPersistence;
	@BeanReference(type = org.pn.service.MedicineLocalService.class)
	protected org.pn.service.MedicineLocalService medicineLocalService;
	@BeanReference(type = MedicinePersistence.class)
	protected MedicinePersistence medicinePersistence;
	@BeanReference(type = org.pn.service.PatientsLocalService.class)
	protected org.pn.service.PatientsLocalService patientsLocalService;
	@BeanReference(type = PatientsPersistence.class)
	protected PatientsPersistence patientsPersistence;
	@BeanReference(type = org.pn.service.RoomPatientLocalService.class)
	protected org.pn.service.RoomPatientLocalService roomPatientLocalService;
	@BeanReference(type = RoomPatientPersistence.class)
	protected RoomPatientPersistence roomPatientPersistence;
	@BeanReference(type = org.pn.service.StaffsLocalService.class)
	protected org.pn.service.StaffsLocalService staffsLocalService;
	@BeanReference(type = StaffsPersistence.class)
	protected StaffsPersistence staffsPersistence;
	@BeanReference(type = org.pn.service.StatusLocalService.class)
	protected org.pn.service.StatusLocalService statusLocalService;
	@BeanReference(type = StatusPersistence.class)
	protected StatusPersistence statusPersistence;
	@BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
	protected com.liferay.counter.service.CounterLocalService counterLocalService;
	@BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
	protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
	@BeanReference(type = com.liferay.portal.service.UserLocalService.class)
	protected com.liferay.portal.service.UserLocalService userLocalService;
	@BeanReference(type = com.liferay.portal.service.UserService.class)
	protected com.liferay.portal.service.UserService userService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	private String _beanIdentifier;
	private ClassLoader _classLoader;
	private StatusLocalServiceClpInvoker _clpInvoker = new StatusLocalServiceClpInvoker();
}