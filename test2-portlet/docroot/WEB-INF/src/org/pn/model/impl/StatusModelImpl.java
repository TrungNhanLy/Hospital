/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.pn.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import org.pn.model.Status;
import org.pn.model.StatusModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Status service. Represents a row in the &quot;hos_status&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link org.pn.model.StatusModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link StatusImpl}.
 * </p>
 *
 * @author thuctap
 * @see StatusImpl
 * @see org.pn.model.Status
 * @see org.pn.model.StatusModel
 * @generated
 */
public class StatusModelImpl extends BaseModelImpl<Status>
	implements StatusModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a status model instance should use the {@link org.pn.model.Status} interface instead.
	 */
	public static final String TABLE_NAME = "hos_status";
	public static final Object[][] TABLE_COLUMNS = {
			{ "status_no", Types.BIGINT },
			{ "status_detail", Types.VARCHAR },
			{ "id_patient", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table hos_status (status_no LONG not null primary key,status_detail VARCHAR(75) null,id_patient LONG)";
	public static final String TABLE_SQL_DROP = "drop table hos_status";
	public static final String ORDER_BY_JPQL = " ORDER BY status.status_no ASC";
	public static final String ORDER_BY_SQL = " ORDER BY hos_status.status_no ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.org.pn.model.Status"), true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.org.pn.model.Status"), true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.org.pn.model.Status"));

	public StatusModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _status_no;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setStatus_no(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _status_no;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Status.class;
	}

	@Override
	public String getModelClassName() {
		return Status.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("status_no", getStatus_no());
		attributes.put("status_detail", getStatus_detail());
		attributes.put("id_patient", getId_patient());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long status_no = (Long)attributes.get("status_no");

		if (status_no != null) {
			setStatus_no(status_no);
		}

		String status_detail = (String)attributes.get("status_detail");

		if (status_detail != null) {
			setStatus_detail(status_detail);
		}

		Long id_patient = (Long)attributes.get("id_patient");

		if (id_patient != null) {
			setId_patient(id_patient);
		}
	}

	@Override
	public long getStatus_no() {
		return _status_no;
	}

	@Override
	public void setStatus_no(long status_no) {
		_status_no = status_no;
	}

	@Override
	public String getStatus_detail() {
		if (_status_detail == null) {
			return StringPool.BLANK;
		}
		else {
			return _status_detail;
		}
	}

	@Override
	public void setStatus_detail(String status_detail) {
		_status_detail = status_detail;
	}

	@Override
	public long getId_patient() {
		return _id_patient;
	}

	@Override
	public void setId_patient(long id_patient) {
		_id_patient = id_patient;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Status.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Status toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Status)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		StatusImpl statusImpl = new StatusImpl();

		statusImpl.setStatus_no(getStatus_no());
		statusImpl.setStatus_detail(getStatus_detail());
		statusImpl.setId_patient(getId_patient());

		statusImpl.resetOriginalValues();

		return statusImpl;
	}

	@Override
	public int compareTo(Status status) {
		long primaryKey = status.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Status)) {
			return false;
		}

		Status status = (Status)obj;

		long primaryKey = status.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<Status> toCacheModel() {
		StatusCacheModel statusCacheModel = new StatusCacheModel();

		statusCacheModel.status_no = getStatus_no();

		statusCacheModel.status_detail = getStatus_detail();

		String status_detail = statusCacheModel.status_detail;

		if ((status_detail != null) && (status_detail.length() == 0)) {
			statusCacheModel.status_detail = null;
		}

		statusCacheModel.id_patient = getId_patient();

		return statusCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(7);

		sb.append("{status_no=");
		sb.append(getStatus_no());
		sb.append(", status_detail=");
		sb.append(getStatus_detail());
		sb.append(", id_patient=");
		sb.append(getId_patient());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(13);

		sb.append("<model><model-name>");
		sb.append("org.pn.model.Status");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>status_no</column-name><column-value><![CDATA[");
		sb.append(getStatus_no());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status_detail</column-name><column-value><![CDATA[");
		sb.append(getStatus_detail());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>id_patient</column-name><column-value><![CDATA[");
		sb.append(getId_patient());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Status.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] { Status.class };
	private long _status_no;
	private String _status_detail;
	private long _id_patient;
	private Status _escapedModel;
}