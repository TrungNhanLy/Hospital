/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.pn.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import org.pn.model.Doctors;
import org.pn.model.DoctorsModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Doctors service. Represents a row in the &quot;hos_doctor&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link org.pn.model.DoctorsModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DoctorsImpl}.
 * </p>
 *
 * @author thuctap
 * @see DoctorsImpl
 * @see org.pn.model.Doctors
 * @see org.pn.model.DoctorsModel
 * @generated
 */
public class DoctorsModelImpl extends BaseModelImpl<Doctors>
	implements DoctorsModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a doctors model instance should use the {@link org.pn.model.Doctors} interface instead.
	 */
	public static final String TABLE_NAME = "hos_doctor";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id_doctor", Types.BIGINT },
			{ "name", Types.VARCHAR },
			{ "address", Types.VARCHAR },
			{ "position", Types.VARCHAR },
			{ "gender", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table hos_doctor (id_doctor LONG not null primary key,name VARCHAR(75) null,address VARCHAR(75) null,position VARCHAR(75) null,gender VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table hos_doctor";
	public static final String ORDER_BY_JPQL = " ORDER BY doctors.id_doctor ASC";
	public static final String ORDER_BY_SQL = " ORDER BY hos_doctor.id_doctor ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.org.pn.model.Doctors"), true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.org.pn.model.Doctors"), true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.org.pn.model.Doctors"));

	public DoctorsModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id_doctor;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId_doctor(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id_doctor;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Doctors.class;
	}

	@Override
	public String getModelClassName() {
		return Doctors.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id_doctor", getId_doctor());
		attributes.put("name", getName());
		attributes.put("address", getAddress());
		attributes.put("position", getPosition());
		attributes.put("gender", getGender());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id_doctor = (Long)attributes.get("id_doctor");

		if (id_doctor != null) {
			setId_doctor(id_doctor);
		}

		String name = (String)attributes.get("name");

		if (name != null) {
			setName(name);
		}

		String address = (String)attributes.get("address");

		if (address != null) {
			setAddress(address);
		}

		String position = (String)attributes.get("position");

		if (position != null) {
			setPosition(position);
		}

		String gender = (String)attributes.get("gender");

		if (gender != null) {
			setGender(gender);
		}
	}

	@Override
	public long getId_doctor() {
		return _id_doctor;
	}

	@Override
	public void setId_doctor(long id_doctor) {
		_id_doctor = id_doctor;
	}

	@Override
	public String getName() {
		if (_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_name = name;
	}

	@Override
	public String getAddress() {
		if (_address == null) {
			return StringPool.BLANK;
		}
		else {
			return _address;
		}
	}

	@Override
	public void setAddress(String address) {
		_address = address;
	}

	@Override
	public String getPosition() {
		if (_position == null) {
			return StringPool.BLANK;
		}
		else {
			return _position;
		}
	}

	@Override
	public void setPosition(String position) {
		_position = position;
	}

	@Override
	public String getGender() {
		if (_gender == null) {
			return StringPool.BLANK;
		}
		else {
			return _gender;
		}
	}

	@Override
	public void setGender(String gender) {
		_gender = gender;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Doctors.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Doctors toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Doctors)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		DoctorsImpl doctorsImpl = new DoctorsImpl();

		doctorsImpl.setId_doctor(getId_doctor());
		doctorsImpl.setName(getName());
		doctorsImpl.setAddress(getAddress());
		doctorsImpl.setPosition(getPosition());
		doctorsImpl.setGender(getGender());

		doctorsImpl.resetOriginalValues();

		return doctorsImpl;
	}

	@Override
	public int compareTo(Doctors doctors) {
		long primaryKey = doctors.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Doctors)) {
			return false;
		}

		Doctors doctors = (Doctors)obj;

		long primaryKey = doctors.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<Doctors> toCacheModel() {
		DoctorsCacheModel doctorsCacheModel = new DoctorsCacheModel();

		doctorsCacheModel.id_doctor = getId_doctor();

		doctorsCacheModel.name = getName();

		String name = doctorsCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			doctorsCacheModel.name = null;
		}

		doctorsCacheModel.address = getAddress();

		String address = doctorsCacheModel.address;

		if ((address != null) && (address.length() == 0)) {
			doctorsCacheModel.address = null;
		}

		doctorsCacheModel.position = getPosition();

		String position = doctorsCacheModel.position;

		if ((position != null) && (position.length() == 0)) {
			doctorsCacheModel.position = null;
		}

		doctorsCacheModel.gender = getGender();

		String gender = doctorsCacheModel.gender;

		if ((gender != null) && (gender.length() == 0)) {
			doctorsCacheModel.gender = null;
		}

		return doctorsCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(11);

		sb.append("{id_doctor=");
		sb.append(getId_doctor());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", address=");
		sb.append(getAddress());
		sb.append(", position=");
		sb.append(getPosition());
		sb.append(", gender=");
		sb.append(getGender());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(19);

		sb.append("<model><model-name>");
		sb.append("org.pn.model.Doctors");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id_doctor</column-name><column-value><![CDATA[");
		sb.append(getId_doctor());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>address</column-name><column-value><![CDATA[");
		sb.append(getAddress());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>position</column-name><column-value><![CDATA[");
		sb.append(getPosition());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>gender</column-name><column-value><![CDATA[");
		sb.append(getGender());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Doctors.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			Doctors.class
		};
	private long _id_doctor;
	private String _name;
	private String _address;
	private String _position;
	private String _gender;
	private Doctors _escapedModel;
}