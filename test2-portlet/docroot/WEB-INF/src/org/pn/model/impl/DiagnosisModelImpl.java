/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.pn.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import org.pn.model.Diagnosis;
import org.pn.model.DiagnosisModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Diagnosis service. Represents a row in the &quot;hos_diagnosis&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link org.pn.model.DiagnosisModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DiagnosisImpl}.
 * </p>
 *
 * @author thuctap
 * @see DiagnosisImpl
 * @see org.pn.model.Diagnosis
 * @see org.pn.model.DiagnosisModel
 * @generated
 */
public class DiagnosisModelImpl extends BaseModelImpl<Diagnosis>
	implements DiagnosisModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a diagnosis model instance should use the {@link org.pn.model.Diagnosis} interface instead.
	 */
	public static final String TABLE_NAME = "hos_diagnosis";
	public static final Object[][] TABLE_COLUMNS = {
			{ "diagnosis_no", Types.BIGINT },
			{ "detail", Types.VARCHAR },
			{ "symptoms", Types.VARCHAR },
			{ "diagnosis_date", Types.TIMESTAMP },
			{ "id_patient", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table hos_diagnosis (diagnosis_no LONG not null primary key,detail VARCHAR(75) null,symptoms VARCHAR(75) null,diagnosis_date DATE null,id_patient LONG)";
	public static final String TABLE_SQL_DROP = "drop table hos_diagnosis";
	public static final String ORDER_BY_JPQL = " ORDER BY diagnosis.diagnosis_no ASC";
	public static final String ORDER_BY_SQL = " ORDER BY hos_diagnosis.diagnosis_no ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.org.pn.model.Diagnosis"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.org.pn.model.Diagnosis"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.org.pn.model.Diagnosis"));

	public DiagnosisModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _diagnosis_no;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setDiagnosis_no(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _diagnosis_no;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Diagnosis.class;
	}

	@Override
	public String getModelClassName() {
		return Diagnosis.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("diagnosis_no", getDiagnosis_no());
		attributes.put("detail", getDetail());
		attributes.put("remak", getRemak());
		attributes.put("diagnosis_date", getDiagnosis_date());
		attributes.put("id_patient", getId_patient());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long diagnosis_no = (Long)attributes.get("diagnosis_no");

		if (diagnosis_no != null) {
			setDiagnosis_no(diagnosis_no);
		}

		String detail = (String)attributes.get("detail");

		if (detail != null) {
			setDetail(detail);
		}

		String remak = (String)attributes.get("remak");

		if (remak != null) {
			setRemak(remak);
		}

		Date diagnosis_date = (Date)attributes.get("diagnosis_date");

		if (diagnosis_date != null) {
			setDiagnosis_date(diagnosis_date);
		}

		Long id_patient = (Long)attributes.get("id_patient");

		if (id_patient != null) {
			setId_patient(id_patient);
		}
	}

	@Override
	public long getDiagnosis_no() {
		return _diagnosis_no;
	}

	@Override
	public void setDiagnosis_no(long diagnosis_no) {
		_diagnosis_no = diagnosis_no;
	}

	@Override
	public String getDetail() {
		if (_detail == null) {
			return StringPool.BLANK;
		}
		else {
			return _detail;
		}
	}

	@Override
	public void setDetail(String detail) {
		_detail = detail;
	}

	@Override
	public String getRemak() {
		if (_remak == null) {
			return StringPool.BLANK;
		}
		else {
			return _remak;
		}
	}

	@Override
	public void setRemak(String remak) {
		_remak = remak;
	}

	@Override
	public Date getDiagnosis_date() {
		return _diagnosis_date;
	}

	@Override
	public void setDiagnosis_date(Date diagnosis_date) {
		_diagnosis_date = diagnosis_date;
	}

	@Override
	public long getId_patient() {
		return _id_patient;
	}

	@Override
	public void setId_patient(long id_patient) {
		_id_patient = id_patient;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Diagnosis.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Diagnosis toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Diagnosis)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		DiagnosisImpl diagnosisImpl = new DiagnosisImpl();

		diagnosisImpl.setDiagnosis_no(getDiagnosis_no());
		diagnosisImpl.setDetail(getDetail());
		diagnosisImpl.setRemak(getRemak());
		diagnosisImpl.setDiagnosis_date(getDiagnosis_date());
		diagnosisImpl.setId_patient(getId_patient());

		diagnosisImpl.resetOriginalValues();

		return diagnosisImpl;
	}

	@Override
	public int compareTo(Diagnosis diagnosis) {
		long primaryKey = diagnosis.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Diagnosis)) {
			return false;
		}

		Diagnosis diagnosis = (Diagnosis)obj;

		long primaryKey = diagnosis.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<Diagnosis> toCacheModel() {
		DiagnosisCacheModel diagnosisCacheModel = new DiagnosisCacheModel();

		diagnosisCacheModel.diagnosis_no = getDiagnosis_no();

		diagnosisCacheModel.detail = getDetail();

		String detail = diagnosisCacheModel.detail;

		if ((detail != null) && (detail.length() == 0)) {
			diagnosisCacheModel.detail = null;
		}

		diagnosisCacheModel.remak = getRemak();

		String remak = diagnosisCacheModel.remak;

		if ((remak != null) && (remak.length() == 0)) {
			diagnosisCacheModel.remak = null;
		}

		Date diagnosis_date = getDiagnosis_date();

		if (diagnosis_date != null) {
			diagnosisCacheModel.diagnosis_date = diagnosis_date.getTime();
		}
		else {
			diagnosisCacheModel.diagnosis_date = Long.MIN_VALUE;
		}

		diagnosisCacheModel.id_patient = getId_patient();

		return diagnosisCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(11);

		sb.append("{diagnosis_no=");
		sb.append(getDiagnosis_no());
		sb.append(", detail=");
		sb.append(getDetail());
		sb.append(", remak=");
		sb.append(getRemak());
		sb.append(", diagnosis_date=");
		sb.append(getDiagnosis_date());
		sb.append(", id_patient=");
		sb.append(getId_patient());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(19);

		sb.append("<model><model-name>");
		sb.append("org.pn.model.Diagnosis");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>diagnosis_no</column-name><column-value><![CDATA[");
		sb.append(getDiagnosis_no());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>detail</column-name><column-value><![CDATA[");
		sb.append(getDetail());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>remak</column-name><column-value><![CDATA[");
		sb.append(getRemak());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>diagnosis_date</column-name><column-value><![CDATA[");
		sb.append(getDiagnosis_date());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>id_patient</column-name><column-value><![CDATA[");
		sb.append(getId_patient());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Diagnosis.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			Diagnosis.class
		};
	private long _diagnosis_no;
	private String _detail;
	private String _remak;
	private Date _diagnosis_date;
	private long _id_patient;
	private Diagnosis _escapedModel;
}